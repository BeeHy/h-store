import cotfd; 
Solver<CP> cp();

// parse transaction trace
function int calculateTransactionTraceCost(string trace_file, int[] partition_site) {
  enum PENALTY = {SAME_HOST,REMOTE_HOST};
  int penalty[PENALTY] = [1,4];
  ifstream file(trace_file);
  int batch_count = file.getInt();
  int xact_count = file.getInt();
  int base_partition = -1;
  string[] batch_partitions;
  int total_cost = 0;
  for (int i = 0; i < xact_count; i++) {
    for (int j = 0; j < batch_count; j++) {
      if (j != 0) {
        batch_partitions = file.getLine().split(" ");
	for (int k = 0; k < batch_partitions.getSize(); k++) {
          if (batch_partitions[k] != " ") {
            // check batch partition against base partition
            if (batch_partitions[k].toInt() != base_partition) {
              // lookup partition_site to determine whether its the same host or remote host
              if (partition_site[batch_partitions[k].toInt()] == partition_site[base_partition]) {
		total_cost += penalty[SAME_HOST];
              } else {
		total_cost += penalty[REMOTE_HOST];
	      }	
            }
	    cout << "batch id: " << j << " partition: " << batch_partitions[k] << endl;
          }
        }
      } else {
        // read base partition
        base_partition = file.getInt();
        //cout << "xact id: " << i << " base id: " << base_partition << endl;
      }
    }
  }
  return total_cost;
}

// parse system information
function int[] processSystemInfo(string system_file) {
  ifstream file(system_file);
  int site_count = file.getInt();
  cout << "site count: " << site_count << endl;
  int site_to_host[0..site_count-1] = -1;
  for (int i = 0; i < site_count; i++) {
    string[] data = file.getLine().split(":");
    //cout << data[0] << endl;
    site_to_host[i] = data[0].toInt();
    cout << "site: " << i << " host " << site_to_host[i] << endl;
  }
  return site_to_host;
}

// start function calls
range partition_range = 0..39;
int total_sites = 9;
string[] args = System.getArgs();
int[] host_site = processSystemInfo(args[args.getSize() - 1]);

// CP Solver - create and move to different class?
var<CP>{int} partition_to_site[partition_range](cp,
0..total_sites);
int partition_mapping[partition_range];
solveall<cp> {
  forall (p in partition_range) {
    if (p != 0 && p % 8 == 0) {
      cp.post(alldifferent(all(i in (p-8 .. p)) partition_to_site[i]));
      }
    }
    //cp.post(partition_to_site[p] != 0);
}
using {
  labelFF(partition_to_site);
  cout << partition_to_site << endl;
  forall (i in partition_range) {
    partition_mapping[i] = partition_to_site[i];
  }
  cp.exit();
}
cout << "total cost: " << calculateTransactionTraceCost(args[args.getSize() - 2], partition_mapping) << endl;