// parse transaction trace
function void processTransactionTrace(string trace_file) {
  ifstream file(trace_file);
  int batch_count = file.getInt();
  int xact_count = file.getInt();
  int base_partition = 0;
  int curr_batch_partition = 0;
  range batch_range = 0..batch_count - 1;
  range xact_range = 0..xact_count - 1;
  forall (t in xact_range) {
    forall (b in batch_range) {
      if (b != 0) {
        curr_batch_partition = file.getInt();
      } else {
        // read base partition
        base_partition = file.getInt();
      }
    }
  }
}

// parse transaction trace
function string[] processSystemInfo(string system_file) {
  ifstream file(system_file);
  int site_count = file.getInt();
  cout << "site count: " << site_count << endl;
  string site_to_host[0..site_count-1] = "";
  for (int i = 0; i < site_count; i++) {
    string[] data = file.getLine().split(":");
    //cout << data[0] << endl;
    site_to_host[i] = data[0];
    cout << "partition: " << i << " host " << site_to_host[i] << endl;
  }
  return site_to_host;
}
//range partition_range = 0..10;
import cotfd;
//Solver<CP> cp();
//var<CP>{int} partition_to_site(cp, partition_range);
string[] args = System.getArgs();
processSystemInfo(args[3]);
//processTransactionTrace(args[args.length - 2]);